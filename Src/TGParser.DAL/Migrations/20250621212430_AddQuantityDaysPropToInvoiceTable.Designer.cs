// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TGParser.DAL;

#nullable disable

namespace TGParser.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250621212430_AddQuantityDaysPropToInvoiceTable")]
    partial class AddQuantityDaysPropToInvoiceTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TGParser.DAL.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvoiceId"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("QuantityDays")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("InvoiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("TGParser.DAL.Models.Preset", b =>
                {
                    b.Property<int>("PresetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PresetId"));

                    b.Property<DateTime>("MaxDateRegisterSeller")
                        .HasColumnType("date");

                    b.Property<int>("MaxNumberOfItemsBuysBySeller")
                        .HasColumnType("integer");

                    b.Property<int>("MaxNumberOfPublishBySeller")
                        .HasColumnType("integer");

                    b.Property<int>("MaxNumbersOfItemsSoldBySeller")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPrice")
                        .HasColumnType("integer");

                    b.Property<int>("MaxViewsByOthersWorkers")
                        .HasColumnType("integer");

                    b.Property<int>("MaxViewsOnSite")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MinDateRegisterSeller")
                        .HasColumnType("date");

                    b.Property<int>("MinPrice")
                        .HasColumnType("integer");

                    b.Property<int>("PeriodSearch")
                        .HasColumnType("integer");

                    b.Property<string>("PresetName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PresetId");

                    b.ToTable("Presets");
                });

            modelBuilder.Entity("TGParser.DAL.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CountViewed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TGParser.DAL.Models.Proxy", b =>
                {
                    b.Property<int>("ProxyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProxyId"));

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<int>("ProxyType")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProxyId");

                    b.ToTable("Proxies");
                });

            modelBuilder.Entity("TGParser.DAL.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<int>("SelectedPresetId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SubscriptionEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TGParser.DAL.Models.UserPreset", b =>
                {
                    b.Property<int>("PresetId")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("boolean");

                    b.Property<int>("ShowedId")
                        .HasColumnType("integer");

                    b.HasKey("PresetId", "UserId");

                    b.HasIndex("PresetId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserPresets");
                });

            modelBuilder.Entity("TGParser.DAL.Models.UserProxy", b =>
                {
                    b.Property<int>("ProxyId")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ShowedId")
                        .HasColumnType("integer");

                    b.HasKey("ProxyId", "UserId");

                    b.HasIndex("ProxyId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserProxies");
                });

            modelBuilder.Entity("TGParser.DAL.Models.UserViewedItems", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeView")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("UserViewedItems");
                });

            modelBuilder.Entity("TGParser.DAL.Models.Invoice", b =>
                {
                    b.HasOne("TGParser.DAL.Models.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TGParser.DAL.Models.UserPreset", b =>
                {
                    b.HasOne("TGParser.DAL.Models.Preset", "Preset")
                        .WithOne("UserPreset")
                        .HasForeignKey("TGParser.DAL.Models.UserPreset", "PresetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TGParser.DAL.Models.User", "User")
                        .WithMany("UserPresets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Preset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TGParser.DAL.Models.UserProxy", b =>
                {
                    b.HasOne("TGParser.DAL.Models.Proxy", "Proxy")
                        .WithOne("UserProxy")
                        .HasForeignKey("TGParser.DAL.Models.UserProxy", "ProxyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TGParser.DAL.Models.User", "User")
                        .WithMany("UserProxies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proxy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TGParser.DAL.Models.UserViewedItems", b =>
                {
                    b.HasOne("TGParser.DAL.Models.Product", "Product")
                        .WithMany("UserViewedItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TGParser.DAL.Models.User", "User")
                        .WithMany("UserViewedItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TGParser.DAL.Models.Preset", b =>
                {
                    b.Navigation("UserPreset")
                        .IsRequired();
                });

            modelBuilder.Entity("TGParser.DAL.Models.Product", b =>
                {
                    b.Navigation("UserViewedItems");
                });

            modelBuilder.Entity("TGParser.DAL.Models.Proxy", b =>
                {
                    b.Navigation("UserProxy")
                        .IsRequired();
                });

            modelBuilder.Entity("TGParser.DAL.Models.User", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("UserPresets");

                    b.Navigation("UserProxies");

                    b.Navigation("UserViewedItems");
                });
#pragma warning restore 612, 618
        }
    }
}
